
By Heikki K Lappalainen
Development of dawo dartlang package 2017 from 0.0.1 >  to  0.0.3 25.9.2017
_________________________________________________________________________
Tracking possible bigger steps in dawo:
0.1.0  Decent console output ready.          |  connector wake.
0.2.0  Flow procedure with automatic #actor. |  base_lib in use.
0.3.0  Simple web_app, in gitHub.            |  separate dawo_continuum package
0.4.0  Local storage, HTTP_server, JSON.     |  dawo_mill operative
0.5.0  Angel server and MongoDB.             |  User input in web_app
0.6.0  Client / users.                       |  *
_________________________________________________________________________

Way to NEXT version:  0.0.4 aso.
Theme:  Statistics, output, variation, versatility.
To be published:  appr. 15.10.2017

          *  *  *   HEAD   *  *  *
4.0 ____  Flow-method to regulate events / output in every control-flow operation.

4.b ____  Use async to catch some Stream / future to normal flow.
          Use async, to gather devNotes, and present them at the end of test_output.

4.1 ____  Reasonable output; regulated form for every classes original-looking output.
          Use top-level StringBuffers to save every classes output.

4.2 ____  Mission - chore; operations and smaller entities; placardM aso.

4.3 ____  Statistics: Roll counters to app, mission, chore, mill. LATER?
          Only If it is naturally part of #Flow method.

4.3b____  dawo_mill giving privileges and orderly run for smaller operations.

          *  *  *   TAIL   *  *  *
4.4 ____  Render ( = test, presentation and quick-note function) to every file.

4,5 ____  dev class. dev tester person.
            -every library imports dev, and can add dev-notes.

4.6 ____  Team notes (List and maps) maybe: in clay_in folder = incoming data
            * not yet clear idea, how this must be done.

4.7 ____  Use JSON, enums, set, Map, queues. Just for to show that you can.
          Get used to #typeDef

          *  *  *   OTHER   *  *  *
4.8 ____  OutGoing data in clayOut-folder: construct common methods.

4.9 ____

4.10 ____ Separate learnLib with its 3 files and collect it to one #learn-library.
          Systematic methods for learning. Terminology.

          *  *  *  Document, comments, notes, TODO's  *  *  *
4.11 ____  doc/
              api/ ***
              getting_started.md, dictionary.MD, history.txt, versions_dev.txt

     Ongoing::
    ____ *5*9  Connector, more ideas
    ____ *6*6  base_lib more ideas.
      Web::
    ____   ADD elements / boxes to web / HTML. ( code in gitHub )
      Server / Client::
           First: simple HTTP-server, then Angel package.

_____________________________________________________________________________


Development in version:  0.0.3.
Theme:  Choose different Client / customer data and small, playing work-flow
To be published:  ~25.9.2017

#Questions:  1. Use JSON or #serialization?
             2.
             3.
 #Waiting complications and hardships?  Yes.
 Value-effort values from 1-10:

3.1 DONE*7*7 Incoming data in clay-folder, clay as synonym for #data.
            5 missions, 12 chores:  ['helsinkiGuide3-5','learnDartlang 4-6', 'myMusic 5',
                                     'myTime 3', 'nationalParks 1'];
            * Fill / create mission Classes; Helsinki, Dartlang, Music, myTime, Nature
            * Other customers data;  Helsinki, dartlang, music, time, park. (dawo/dev is original, always there)
            * dev data

3.2 DO__*3*3 Modified hist_versions.txt to present version 0.0.3
             NO TIME FOR:    Check all TODO:s and NOTE:s.
             Check README.md to 0.0.3  OK. and plan 0.0.4
             ??  DO  NOT TRY.  WASTE OF TIME. TAKE SOME REST AND DEEP THINKING.
             Documentation is NOW only third in importance.  Documentation can not be
             line-in-line with code, it describes just one phase in past dawo building.
             Messed too much time in dev of some property, no time left for this now.

3.3 _ON_7*4  Better "Rumba" flow / method and example.
           - app / mission / chore : all working together

3.4 DONE7*2 Fill #app's & #Mission's aso. generic lists with members (objects)
            Use generic lists inside classes for to control their "sub-ordinates"
            dawoApp has: missionL<Mission>
            mission has choreL<Chore>
            Roll methods for them.

3,5 DONE*2*2 Hack-Dirty to get rumba-app-mission output to => top-level-buffers
             Next: clever way to base_struct output from every class to output-buffers

3.6 DONE*2*2 Collect Dev / team notes. create Dev, DevHelp and DevMessage class

3.7 DONE*3*3 Join one-happy-stream to dawo-rumba/ dawoApp, for to get used to streams.


     ongoing::
3.8 DONE*5*9  Connector, more ideas
3.9 DONE*6*6  base_lib more ideas.
3.10 ___E   ADD elements / boxes to web / HTML.

< Value-effort values from 1-10
DONE: 40 => 33, not: 7

#Overall _ONE*9*7  ready : 77 % to 0.0.3

Later:
    ____ *8*5    Add typedef, queue, enum, set, duration; just to showcase them
         *5*2   Choose customer in parameters. Add political-data  (test-case)
_____________________________________________________________________________
Ready to version 0.0.2, completed fixes.
Theme : baseStructure, base_lib, dawo_mill(schema), connector(schema), learn/code_snippets
Publish to Pub: 10.9.-15.9.2017.  Release 0.0.2 in GitHub.

Value-effort values from 1-10:
2.1. DONE*2*2  Little roll / render example
2.2. DONE*4*2   Readme file, README.md, modified
2.3. DONE*1*1   Class constructors to every class

2.4. __e_*3*4   Import / export usage unclear. Get all files in one command.


2.5. DONE*5*5   Make Stream-play (sync) / explore file.  ( BOORING! ) no, it was interesting :)
          in code_snippets:  learn_stream_sync

2.6. DONE*7*5   Base structure class that important classes extend
          - includes: - INIT-BUILD-ROLL-SHOW-DONE cycle

2.7. DONE*5*3  StringBuffers to every important class and file for output.
          - this also adds visibility for variable-name

2.8. DONE*8*7  Start: Connector-class; Connect App-Mission-Chore classes functionality in mill-process
         - in this phase this is gonna be very elementary, schematic
         - At the end this is fine-graded and long development plan. ( DIFFICULT :( )

2.9. DONE*5*3 created DawoDewTest  class in dawo_dev

2.10. DONE*4*3 Add generic lists for every meaningful member
    * like: List<CommonChore> choreL = []
    * add usage later
Overall value-effort:  *6*5, time spent, maybe 30 hours, beginners style.

Overall problems:
- Is analyzer acting weird? It do not show variables (fast enough).
- Small uncertainty in libraries. When to import and export.
  * Import all in tests, for to be sure. And analyzer finds them quick.





_________________________________________________________________________

Version coming:  0.0.5 aso

class.init / done  should #deactivate #clients in <chore> aso. lists

Working rumba  is mark for  0.1.0  version

Make Rumba be a Chore

Make x (dev?) be a Chore

Master Chore can have subChores

Chore marked as a "slave" to other Chore

_________________________________________________________________________
Endless Flow of ideas: Adding anything is blocked for  now. 21.9.2017, waiting 0.0.3
teamInno:
  * Growth. sprout
  * Words:  Pole,
teamDev:
  * icon

teamSec:
  *  Key, to get access to some methods
  *  howTo hide access to some class

* Class: Glad
* Int opFull100 = 79;   #Opera operation fullfill-state (max100) is now 79.
* NotAccessMethod - InThisState -field
*